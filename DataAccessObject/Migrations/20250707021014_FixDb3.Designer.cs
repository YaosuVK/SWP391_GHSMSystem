// <auto-generated />
using System;
using DataAccessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObject.Migrations
{
    [DbContext(typeof(GHSMContext))]
    [Migration("20250707021014_FixDb3")]
    partial class FixDb3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<string>("AppointmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<string>("ConsultantID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ConsultationFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("STIsTestFee")
                        .HasColumnType("float");

                    b.Property<int?>("SlotID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int?>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.Property<double>("remainingBalance")
                        .HasColumnType("float");

                    b.HasKey("AppointmentID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("ConsultantID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("SlotID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BusinessObject.Model.AppointmentDetail", b =>
                {
                    b.Property<int>("AppointmentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentDetailID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantProfileID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("AppointmentDetailID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("ConsultantProfileID");

                    b.HasIndex("ServicesID");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClinicID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("ClinicID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BusinessObject.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryID");

                    b.HasIndex("ClinicID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BusinessObject.Model.Clinic", b =>
                {
                    b.Property<int>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClinicID");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("BusinessObject.Model.ConsultantProfile", b =>
                {
                    b.Property<int>("ConsultantProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultantProfileID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ConsultantPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultantProfileID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("ConsultantProfiles");
                });

            modelBuilder.Entity("BusinessObject.Model.ConsultantSlot", b =>
                {
                    b.Property<string>("ConsultantID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAppointment")
                        .HasColumnType("int");

                    b.HasKey("ConsultantID", "SlotID");

                    b.HasIndex("SlotID");

                    b.ToTable("ConsultantSlots");
                });

            modelBuilder.Entity("BusinessObject.Model.CyclePrediction", b =>
                {
                    b.Property<int>("CyclePredictionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CyclePredictionID"));

                    b.Property<DateTime>("FertileEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FertileStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenstrualCycleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextPeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OvulationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CyclePredictionID");

                    b.HasIndex("MenstrualCycleID")
                        .IsUnique();

                    b.ToTable("CyclePredictions");
                });

            modelBuilder.Entity("BusinessObject.Model.FeedBack", b =>
                {
                    b.Property<int>("FeedBackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("FacilityRate")
                        .HasColumnType("float");

                    b.Property<double>("ServiceRate")
                        .HasColumnType("float");

                    b.Property<double>("SumRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedBackID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageBlog", b =>
                {
                    b.Property<int>("ImageBlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageBlogID"));

                    b.Property<int?>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageBlogID");

                    b.HasIndex("BlogID");

                    b.ToTable("ImageBlogs");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageService", b =>
                {
                    b.Property<int>("ImageServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageServiceID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("ImageServiceID");

                    b.HasIndex("ServicesID");

                    b.ToTable("ImageServices");
                });

            modelBuilder.Entity("BusinessObject.Model.LabTest", b =>
                {
                    b.Property<int>("LabTestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsPositive")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabTestID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.HasIndex("TreatmentID");

                    b.ToTable("Labtests");
                });

            modelBuilder.Entity("BusinessObject.Model.MenstrualCycle", b =>
                {
                    b.Property<int>("MenstrualCycleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenstrualCycleID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CycleLength")
                        .HasColumnType("int");

                    b.Property<int>("PeriodLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenstrualCycleID");

                    b.HasIndex("CustomerID");

                    b.ToTable("MenstrualCycles");
                });

            modelBuilder.Entity("BusinessObject.Model.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("ConsultantID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("ConsultantID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("QuestionID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BusinessObject.Model.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Property<int>("ServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("ServicesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServicesPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServicesID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Slot", b =>
                {
                    b.Property<int>("SlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxConsultant")
                        .HasColumnType("int");

                    b.Property<int>("MaxTestAppointment")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkingHourID")
                        .HasColumnType("int");

                    b.HasKey("SlotID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("WorkingHourID");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecureHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusTransaction")
                        .HasColumnType("int");

                    b.Property<string>("TmnCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionKind")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxnRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AppointmentID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.TreatmentOutcome", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentID"));

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("ConsultantID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentID");

                    b.HasIndex("AppointmentID")
                        .IsUnique()
                        .HasFilter("[AppointmentID] IS NOT NULL");

                    b.HasIndex("ConsultantID");

                    b.HasIndex("CustomerID");

                    b.ToTable("TreatmentOutcomes");
                });

            modelBuilder.Entity("BusinessObject.Model.WorkingHour", b =>
                {
                    b.Property<int>("WorkingHourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingHourID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("DayInWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("WorkingHourID");

                    b.HasIndex("ClinicID");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "df9eba5a-26e4-4617-a6dc-e24c0ecd6d2b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8917dcef-1ad4-4042-8ae2-72bf6932691c",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "835809ba-c12c-48f0-b652-bf626bbd3c33",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = "058a70cb-c699-4917-b786-387a92111ac6",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "d49b884a-6b76-4836-ab55-5b4ce947fe2d",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Appointment", b =>
                {
                    b.HasOne("BusinessObject.Model.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Consultant")
                        .WithMany("ConsultantAppointments")
                        .HasForeignKey("ConsultantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany("CustomerAppointments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Slot", "Slot")
                        .WithMany("Appointments")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Clinic");

                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BusinessObject.Model.AppointmentDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.ConsultantProfile", "ConsultantProfile")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ConsultantProfileID");

                    b.HasOne("BusinessObject.Model.Services", "Service")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Appointment");

                    b.Navigation("ConsultantProfile");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessObject.Model.Blog", b =>
                {
                    b.HasOne("BusinessObject.Model.Clinic", null)
                        .WithMany("Blogs")
                        .HasForeignKey("ClinicID");
                });

            modelBuilder.Entity("BusinessObject.Model.Category", b =>
                {
                    b.HasOne("BusinessObject.Model.Clinic", "Clinic")
                        .WithMany("Categories")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BusinessObject.Model.ConsultantProfile", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithOne("ConsultantProfile")
                        .HasForeignKey("BusinessObject.Model.ConsultantProfile", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.ConsultantSlot", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Consultant")
                        .WithMany("ConsultantSlots")
                        .HasForeignKey("ConsultantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Slot", "Slot")
                        .WithMany("ConsultantSlots")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BusinessObject.Model.CyclePrediction", b =>
                {
                    b.HasOne("BusinessObject.Model.MenstrualCycle", "MenstrualCycle")
                        .WithOne("Prediction")
                        .HasForeignKey("BusinessObject.Model.CyclePrediction", "MenstrualCycleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenstrualCycle");
                });

            modelBuilder.Entity("BusinessObject.Model.FeedBack", b =>
                {
                    b.HasOne("BusinessObject.Model.Appointment", "Appointment")
                        .WithMany("FeedBacks")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageBlog", b =>
                {
                    b.HasOne("BusinessObject.Model.Blog", "Blog")
                        .WithMany("ImageBlogs")
                        .HasForeignKey("BlogID");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageService", b =>
                {
                    b.HasOne("BusinessObject.Model.Services", "Service")
                        .WithMany("ImageServices")
                        .HasForeignKey("ServicesID");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessObject.Model.LabTest", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Staff")
                        .WithMany("LabTests")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.TreatmentOutcome", "TreatmentOutcome")
                        .WithMany("LabTests")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("TreatmentOutcome");
                });

            modelBuilder.Entity("BusinessObject.Model.MenstrualCycle", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany("MenstrualCycles")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Model.Message", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantID");

                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("BusinessObject.Model.Message", "ParentMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ParentMessageId");

                    b.HasOne("BusinessObject.Model.Question", "Question")
                        .WithMany("Messages")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("ParentMessage");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BusinessObject.Model.Question", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.HasOne("BusinessObject.Model.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Clinic", "Clinic")
                        .WithMany("Services")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Manager")
                        .WithMany("Services")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Clinic");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BusinessObject.Model.Slot", b =>
                {
                    b.HasOne("BusinessObject.Model.Clinic", "Clinic")
                        .WithMany("Slots")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.WorkingHour", "WorkingHour")
                        .WithMany("Slots")
                        .HasForeignKey("WorkingHourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("WorkingHour");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("BusinessObject.Model.Appointment", "Appointment")
                        .WithMany("Transactions")
                        .HasForeignKey("AppointmentID");

                    b.Navigation("Account");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BusinessObject.Model.TreatmentOutcome", b =>
                {
                    b.HasOne("BusinessObject.Model.Appointment", "Appointment")
                        .WithOne("TreatmentOutcome")
                        .HasForeignKey("BusinessObject.Model.TreatmentOutcome", "AppointmentID");

                    b.HasOne("BusinessObject.Model.Account", "Consultant")
                        .WithMany("ConsultantTreatmentOutcomes")
                        .HasForeignKey("ConsultantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Customer")
                        .WithMany("CustomerTreatmentOutcomes")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Model.WorkingHour", b =>
                {
                    b.HasOne("BusinessObject.Model.Clinic", "Clinic")
                        .WithMany("WorkingHours")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Navigation("ConsultantAppointments");

                    b.Navigation("ConsultantProfile");

                    b.Navigation("ConsultantSlots");

                    b.Navigation("ConsultantTreatmentOutcomes");

                    b.Navigation("CustomerAppointments");

                    b.Navigation("CustomerTreatmentOutcomes");

                    b.Navigation("LabTests");

                    b.Navigation("MenstrualCycles");

                    b.Navigation("Ratings");

                    b.Navigation("Services");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.Appointment", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("FeedBacks");

                    b.Navigation("Transactions");

                    b.Navigation("TreatmentOutcome")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Blog", b =>
                {
                    b.Navigation("ImageBlogs");
                });

            modelBuilder.Entity("BusinessObject.Model.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Categories");

                    b.Navigation("Services");

                    b.Navigation("Slots");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("BusinessObject.Model.ConsultantProfile", b =>
                {
                    b.Navigation("AppointmentDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.MenstrualCycle", b =>
                {
                    b.Navigation("Prediction")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BusinessObject.Model.Question", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("ImageServices");
                });

            modelBuilder.Entity("BusinessObject.Model.Slot", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ConsultantSlots");
                });

            modelBuilder.Entity("BusinessObject.Model.TreatmentOutcome", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("BusinessObject.Model.WorkingHour", b =>
                {
                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
